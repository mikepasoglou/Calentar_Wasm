@page "/Login/{ParamUsrName}/{ParamUsrPwd}"

@using Calentar.Client.DataModels
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager NavigationManager
@inject IJSRuntime Js;
@inject HttpClient httpClient



<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            background-color: antiquewhite;
            /*background: linear-gradient(#80FFDB, #3190D9);*/
           /* background-image: url("/images/bg.jpg"); */
        }

        .card {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
            transition: 0.3s;
            width: 50%;
            float: left;
            margin-left: 10px;
            display: flex;
            justify-content: center;
            align-content:center;
            background-color: antiquewhite;
        }

            .card:hover {
                box-shadow: 0 8px 36px 0 rgba(0, 0, 0, 0.5);
            }

       

        .flex-container {
            display: flex;
            justify-content: space-around;
            background: #fff;
            background-color: antiquewhite;
        }
      

    </style>
</head>

<body>

    <!--  VERY GOOD
    https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial
    -->


    @if (myer != string.Empty)
    {
        ShowAlert(myer);
    }


    <div class="flex-container">
    <div class="card" style="">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="SubmitLogin">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                @if (ClassTEST.USERID == string.Empty)
                {
                    <button disabled="@loading" class="btn btn-primary">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                    Login
                </button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="SubmitLogout">
                        
                    Logout
                </button>
                }
                 @if (ClassTEST.USERID ==string.Empty)
                {
                    <NavLink href="/Register" class="btn btn-link">Register</NavLink>
                }
                </EditForm>
        </div>
    </div>
    </div>



</body> </html>



@code {

    // https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial

    [Parameter] public string ParamUsrName { get; set; }
    [Parameter] public string ParamUsrPwd { get; set; }

    public class usrlogin
    {
        public string Username;
        public string Password;

    }




    /*
    public class ErrorResponseLogin
    {
    public string type { get; set; }
    public int Status { get; set; }
    public string Traceid { get; set; }
    public Dictionary<string, string[]> Errors { get; set; }
    }
    */


    /* /*
    *
    * '{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.",
    * "status":400,
    * "traceId":"00-ccae454503aa4f161c27d86543cda6f5-ec2fac8eb4b64b32-00",
    * "errors":{"Username":["User Name is required"]}}'
             */




    private usrlogin model = new usrlogin();

    private string myer = string.Empty;
    private bool rememberMe = true;  
    private bool loading;
    private bool logoutvisible = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
                        
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (ParamUsrName == "{ParamUsrName}")
            ParamUsrName = string.Empty;

        if (ParamUsrPwd == "{ParamUsrPwd}")
            ParamUsrPwd = string.Empty;
    }




    private async Task SubmitLogin()
    {
        loading = true;
        await LogintoServer(model.Username,model.Password);
    }

    private async Task SubmitLogout()
    {
        ClassTEST.USERID = string.Empty;
        ClassTEST.responseToken = string.Empty;
        logoutvisible = false;
        NavigationManager.NavigateTo("/");

    }

   


    private async Task LogintoServer(string n,string p)
    {
        // https://mikepas-001-site2.htempurl.com/api/                    //local
        // https://mikepas-001-site2.htempurl.com/api/    //web


        try
        {
            myer = string.Empty;
            httpClient.DefaultRequestHeaders.Clear();
            ///
            string apiUrl = "https://mikepas-001-site2.htempurl.com/api/Authentication/login";  //  web server
            //string apiUrl = "https://localhost:7104/api/Authentication/login";  //  local
            object data = new { username = n, password = p };  // must encrypt
            HttpResponseMessage response = await httpClient.PostAsJsonAsync(apiUrl, data);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseOK>();
                {
                    var st = result.Status;
                    if (st == 1)
                    {
                        ClassTEST.responseToken = result.Token;
                        ClassTEST.USERID = result.Userid;
                        loading = false;
                        logoutvisible = true;
                        NavigationManager.NavigateTo("/TestFilaretiSheduler");
                    }
                }
                /*
                string delimiter = "USER__ID";

                string[] parts = result.Split(new string[] { delimiter }, StringSplitOptions.None);
                    if (parts.Length >= 2)
                    {
                    ClassTEST.responseToken = parts[0];  // TO BE CHANGE  IS temporary solution
                    ClassTEST.USERID = parts[1];
                    loading = false;
                    logoutvisible = true;
                    NavigationManager.NavigateTo("/ShowCalentar");
            }
            */
            }
            else
            {
                ErrorResponse resultclass = await ErrorResponse.FromHttpResponseAsync(response);
                myer = resultclass.GetErrorString();
                loading = false;

                /*  IS OK 
                var resultclass = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                var status = resultclass.Status;
                //myer = resultclass.Error1;
                if (resultclass.Errors != null)
                {
                    if (resultclass.Errors.Keys.Count > 0)
                    {
                        myer = string.Empty;
                        foreach (var errorKey in resultclass.Errors.Keys)
                        {
                            var errorMessages = resultclass.Errors[errorKey];
                            foreach (var errorMessage in errorMessages)
                            {
                                //Console.WriteLine($"Error Key: {errorKey}, Error Message: {errorMessage}");
                                myer += errorMessage + "    " + errorKey + "  ";
                            }
                        }
                    }
                }
                loading = false;
                */

                /*
                var result = await response.Content.ReadAsStringAsync();

                /*
                *
                * '{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.",
                * "status":400,
                * "traceId":"00-ccae454503aa4f161c27d86543cda6f5-ec2fac8eb4b64b32-00",
                * "errors":{"Username":["User Name is required"]}}'
                 */
            }

        }
        catch (Exception ex)
        {
            myer = $"Error: {ex.Message}";
        }
    }


    private void ShowAlert(string mes)
    {
        Js.InvokeVoidAsync("alert", mes);
    }









    /*

    public async Task<string> Loginttoservice(string username, string password)
    {
        try
        {
            var loginModel = new LoginModel
                {
                    Username = username,
                    Password = password
                };

            // Serialize the model to JSON
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(loginModel);

            // Prepare the HTTP request
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await _httpClient.PostAsync("login", content);

            if (response.IsSuccessStatusCode)
            {
                // If the response is successful, read the message from the response
                string message = await response.Content.ReadAsStringAsync();
                return message;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                // If the response is a 400 Bad Request, parse the error details
                var errorResponse = await response.Content.ReadAsStringAsync();
                // Deserialize the JSON error response
                var errorData = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(errorResponse);
                Console.WriteLine($"Validation error: {errorData.Message}");
                // Handle the validation errors as needed
            }
            else
            {
                // Handle other error cases
                Console.WriteLine($"Error: {response.ReasonPhrase}");
                // You can add additional error handling logic here
            }

            return null; // Or throw an exception or return a suitable error message
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Handle general exception cases
            return null; // Or throw an exception or return a suitable error message
        }
    }
    */













}
