@page "/ShowCalentar"
@inject HttpClient httpClient
@inject DialogService DialogService


@if ((ClassTEST.USERID == string.Empty) || (ClassTEST.responseToken == string.Empty))
{
    <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter">Please Login First </RadzenAlert>
}


<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="AppointmentVM" Data=@appointmentsList 
                 StartProperty="STARTDATE" EndProperty="ENDDATE"
                 TextProperty="MESSAGE" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>


<RadzenDialog />

<EventConsole @ref=@console/>




@code {
    RadzenScheduler<AppointmentVM> scheduler;
    EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    private bool usrloged = false;
    IEnumerable<AppointmentVM>? appointmentsList;

    string myer;
    /*
    IList<Appointment> appointments = new List<Appointment>
        {

        new Appointment { STARTDATE = DateTime.Today.AddDays(-2), ENDDATE = DateTime.Today.AddDays(-2), MESSAGE = "Birthday" },
        new Appointment { STARTDATE = DateTime.Today.AddDays(-11), ENDDATE = DateTime.Today.AddDays(-10), MESSAGE = "Day off" },
        new Appointment { STARTDATE = DateTime.Today.AddDays(-10), ENDDATE = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { STARTDATE = DateTime.Today.AddHours(10), ENDDATE = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { STARTDATE = DateTime.Today.AddHours(10), ENDDATE = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { STARTDATE = DateTime.Today.AddHours(14), ENDDATE = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { STARTDATE = DateTime.Today.AddDays(1), ENDDATE = DateTime.Today.AddDays(12), Text = "Vacation" },
    };
    */

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await FillSheduler(ClassTEST.USERID); // cur USer ID
            StateHasChanged();
        }
    }


    /*
    protected override async Task OnInitializedAsync()
    {
        
        if ( (ClassTEST.USERID == string.Empty) || (ClassTEST.responseToken==string.Empty) )
            usrloged = false;
        else
            usrloged = true;

    }
    */

    private async Task FillSheduler(string UserId)
    {
        try
        {
            if (string.IsNullOrEmpty(ClassTEST.responseToken))
            {
                myer = "JWT  is IsNullOrEmpty.";
                return;
            }

            httpClient.DefaultRequestHeaders.Clear(); // Clear existing headers (if any)
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {ClassTEST.responseToken}");

            //string baseUri = "https://mikepas-001-site2.htempurl.com/api/Appointment/GetAppointmentsList";
            string baseUri = "https://mikepas-001-site2.htempurl.com/api/Appointment/GetAppointmentsList";
            Dictionary<string, string> queryParameters = new Dictionary<string, string>{
                                { "curusrid", UserId }     };
            string queryString = string.Join("&", queryParameters.Select(kv => $"{kv.Key}={Uri.EscapeDataString(kv.Value)}"));
            string uriWithParameters = $"{baseUri}?{queryString}";


            HttpResponseMessage response = await httpClient.GetAsync(uriWithParameters);
            if (response.IsSuccessStatusCode)
            {
                appointmentsList = await httpClient.GetFromJsonAsync<IEnumerable<AppointmentVM>>(uriWithParameters);
            }
            else
                myer = response.StatusCode.ToString();



        }
        catch (Exception ex) { string mes = ex.Message; Console.WriteLine(mes); }
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} End={args.End}");


        if (args.View.Text != "Year")
        {
            AppointmentVM data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object>{ { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointmentsList = appointmentsList.Append(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentVM> args)
    {
        console.Log($"AppointmentSelect: Appointment={args.Data.MESSAGE}");

        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentVM> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.COLORCAT == 1)
            args.Attributes["style"] = "background: red";
    }
   

     



}